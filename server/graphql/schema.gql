type Query {
    # Summoner-related queries
    summoner(region: String!, name: String!): Summoner
    summoners: [Summoner!]!

    # Match-related queries
    matches(
        limit: Int
        timestamp: Float
        region: String
        summonerNames: [String!]
        roles: [String!]
        championIds: [Int!]
        queueIds: [Int!]
        tags: [String!]
        stats: [StatRequest!]
    ): MatchData!

    # Champion Mastery
    masteries(
        limit: Int
        championId: Int
        puuid: String
        sortBy: MasterySortInput
    ): [Mastery!]!

    # Challenges
    challenges(
        limit: Int
        puuid: String
        sortBy: ChallengeSortInput
    ): [Challenge!]!

    # Game Data
    gameData: GameData!

    # Tag Data
    tagFileByVersion( version: ID! ): TagData!

    # Authentication
    me: User
}

### Mutation
type Mutation {
    # Summoner Management
    addSummoner(region: String!, name: String!): Summoner!
    updateSummoner(id: ID!): Summoner!
    updateAllSummoners: [Summoner!]!
    deleteSummoner(id: ID!): DeleteResponse!

    # Match Management
    deleteOrphanMatches: DeleteResponse!
    formatOneParticipant(id: ID!): Participant!
    formatAllParticipants: FormatParticipantsResponse!
    recoverMatchDataFromOrphanParticipants: FormatParticipantsResponse!

    # Game Data Management
    updateGameData: UpdateResponse!
    updateTagData(file: String!): UpdateResponse!

    # Authentication
    register(username: String!, password: String!): AuthResponse!
    login(username: String!, password: String!): AuthResponse!
}

## Core Types

### Summoner-Related Types
type Summoner {
    # Basic Info
    id: ID!
    name: String!
    tagline: String!
    profileIconId: Int!
    summonerLevel: Int!

    # Region Info
    regionDisplay: String!
    regionServer: String!
    regionGeo: String!
    regionURL: String!
    nameURL: String!

    # IDs
    accountId: String!
    puuid: String!

    # Metadata
    revisionDate: Float!
    lastUpdated: Float!

    # Related Data
    rankedData: [RankedData!]!
    challengeData: ChallengeData!
    masteryData: [Mastery!]!
    matches(limit: Int, queueId: Int): [Match!]!
}

type RankedData {
    leagueId: String!
    queueType: String!
    tier: String!
    rank: String!
    summonerId: String!
    summonerName: String!
    leaguePoints: Int!
    wins: Int!
    losses: Int!
    veteran: Boolean!
    inactive: Boolean!
    freshBlood: Boolean!
    hotStreak: Boolean!
}

type ChallengeData {
    totalPoints: ChallengePoints!
    categoryPoints: CategoryPoints!
    challenges: [Challenge!]!
    preferences: ChallengePreferences!
}

type ChallengePoints {
    level: String!
    current: Int!
    max: Int!
    percentile: Float!
}

type CategoryPoints {
    TEAMWORK: ChallengePoints!
    EXPERTISE: ChallengePoints!
    IMAGINATION: ChallengePoints!
    COLLECTION: ChallengePoints!
    VETERANCY: ChallengePoints!
}

type ChallengePreferences {
    bannerAccent: String!
    title: String!
    challengeIds: [Int!]!
}

### Match-Related Types
type Match {
    id: ID
    metadata: MatchMetadata
    info: MatchInfo
}

type MatchData {
    matchData: [Match!]!
    statData: JSON!
}

type MatchMetadata {
    dataVersion: String!
    matchId: String!
    participants: [String!]!
    queueId: Int!
    tftSetNumber: Int
    gameLength: Float!
    gameVariation: String!
    gameVersion: String!
    gameMode: String!
    gameType: String!
    gameQueueConfigId: Int!
    mapId: Int!
    platformId: String!
    gameStartTime: Float!
    gameEndTime: Float!
    gameCreation: Float!
}

type MatchInfo {
    gameCreation: Float!
    gameDuration: Float!
    gameId: Float!
    gameMode: String!
    gameName: String!
    gameStartTimestamp: Float!
    gameType: String!
    gameVersion: String!
    mapId: Float!
    participants: [Participant!]!
    platformId: String!
    queueId: Int!
    tftSetNumber: Float
    teams: [Team!]!
}

type Team {
    teamId: Int!
    win: Boolean!
    firstBlood: Boolean!
    firstTower: Boolean!
    firstInhibitor: Boolean!
    firstBaron: Boolean!
    firstDragon: Boolean!
    firstRiftHerald: Boolean!
    towerKills: Int!
    inhibitorKills: Int!
    baronKills: Int!
    dragonKills: Int!
    riftHeraldKills: Int!
    dominionVictoryScore: Int!
    bans: [Ban!]!
}

type Ban {
    championId: Int!
    pickTurn: Int!
}

### Participant Type

type Participant {
    uniqueId: String!
    gameMode: String!
    gameStartTimestamp: Float
    matchId: String
    allInPings: Int
    assistMePings: Int
    assists: Int!
    baitPings: Int
    baronKills: Int!
    basicPings: Int
    bountyLevel: Int!
    queueId: Int
    challenges: Challenges
    champExperience: Int!
    champLevel: Int!
    championId: Int!
    championName: String!
    championTransform: Int!
    commandPings: Int
    consumablesPurchased: Int!
    damageDealtToBuildings: Int!
    damageDealtToObjectives: Int!
    damageDealtToTurrets: Int!
    damageSelfMitigated: Int!
    dangerPings: Int
    deaths: Int!
    detectorWardsPlaced: Int!
    doubleKills: Int!
    dragonKills: Int!
    eligibleForProgression: Boolean
    enemyMissingPings: Int
    enemyVisionPings: Int
    firstBloodAssist: Boolean!
    firstBloodKill: Boolean!
    firstTowerAssist: Boolean!
    firstTowerKill: Boolean!
    gameEndedInEarlySurrender: Boolean!
    gameEndedInSurrender: Boolean!
    getBackPings: Int
    goldEarned: Int!
    goldSpent: Int!
    holdPings: Int
    individualPosition: String
    inhibitorKills: Int
    inhibitorTakedowns: Int
    inhibitorsLost: Int
    itemNumber: Int
    item0: Int
    item1: Int
    item2: Int
    item3: Int
    item4: Int
    item5: Int
    item6: Int
    itemsPurchased: Int
    killingSprees: Int
    kills: Int
    lane: String
    largestCriticalStrike: Int
    largestKillingSpree: Int
    largestMultiKill: Int
    longestTimeSpentLiving: Int
    magicDamageDealt: Int
    magicDamageDealtToChampions: Int
    magicDamageTaken: Int
    needVisionPings: Int
    neutralMinionsKilled: Int
    nexusKills: Int
    nexusLost: Int
    nexusTakedowns: Int
    objectivesStolen: Int
    objectivesStolenAssists: Int
    onMyWayPings: Int
    participantId: Int
    pentaKills: Int
    perks: Perks
    physicalDamageDealt: Int
    physicalDamageDealtToChampions: Int
    physicalDamageTaken: Int
    profileIcon: Int
    pushPings: Int
    puuid: String
    quadraKills: Int
    riotIdGameName: String
    riotIdTagline: String
    role: String
    sightWardsBoughtInGame: Int
    spell1Casts: Int
    spell2Casts: Int
    spell3Casts: Int
    spell4Casts: Int
    summoner1Casts: Int
    summoner1Id: Int
    summoner2Casts: Int
    summoner2Id: Int
    summonerId: String
    summonerLevel: Int
    summonerName: String
    tagsVersion: Int
    tags: JSON
    teamEarlySurrendered: Boolean
    teamId: Int
    teamPosition: String
    timeCCingOthers: Int
    timePlayed: Int
    totalDamageDealt: Int
    totalDamageDealtToChampions: Int
    totalDamageShieldedOnTeammates: Int
    totalDamageTaken: Int
    totalHeal: Int
    totalHealsOnTeammates: Int
    totalMinionsKilled: Int
    totalTimeCCDealt: Int
    totalTimeSpentDead: Int
    totalUnitsHealed: Int
    tripleKills: Int
    trueDamageDealt: Int
    trueDamageDealtToChampions: Int
    trueDamageTaken: Int
    turretKills: Int
    turretTakedowns: Int
    turretsLost: Int
    unrealKills: Int
    visionClearedPings: Int
    visionScore: Int
    visionWardsBoughtInGame: Int
    wardsKilled: Int
    wardsPlaced: Int
    win: Boolean
}

type FormatParticipantsResponse {
    total: Int!
    success: Int!
    failed: Int!
    errors: JSON!
}

type Perks {
    statPerks: StatPerks
    styles: [Style]
}

type StatPerks {
    defense: Int
    flex: Int
    offense: Int
}

type Style {
    description: String
    selections: [Selection]
    style: Int
}

type Selection {
    perk: Int
    var1: Int
    var2: Int
    var3: Int
}

type Challenges {
    ## filled by schema.js
    default: Int
}

### Champion Mastery Types
type Mastery {
    # Basic Info
    id: ID!
    uniqueId: String!
    championId: Int!
    championLevel: Int!
    championPoints: Int!

    # Progress
    championPointsSinceLastLevel: Int!
    championPointsUntilNextLevel: Int!

    # Stats
    lastPlayTime: Float!
    chestGranted: Boolean!
    tokensEarned: Int!
    winRate: Float
    gamesPlayed: Int!

    # Summoner Info
    summonerId: String!
    puuid: String!
    profileIconId: Int!
    summonerName: String!
    summoner: Summoner!
}

### Challenge Types
type Challenge {
    id: ID!
    uniqueId: String!
    challengeId: Int!
    challengeName: String!
    shortDesc: String!

    # Progress
    percentile: Float!
    level: String!
    value: Float!
    achievedTime: Float!

    # Summoner Info
    puuid: String!
    profileIconId: Int!
    summonerName: String!
    summoner: Summoner!
}

### Game Data Types
type GameData {
    champions: ChampionData!
    items: [ItemData!]!
    summonerSpells: SummonerSpellData!
    queueTypes: [QueueType!]!
    tagData: TagData!
    tagFileVersions: [TagFileVersion!]!
    tagCurrentVersion: TagFileVersion!
    tagLastBackFill: TagFileBackFill!
    summoners: [Summoner!]!
}

type TagFileVersion {
    id: ID!
    user: String!
}

type TagFileBackFill {
    id: ID!
    user: String!
    results: FormatParticipantsResponse!
}

type ChampionData {
    data: JSON!
    version: String!
    type: String!
    format: String!
}

type ItemData {
    id: ID!
    name: String!
    description: String
    active: Boolean
    inStore: Boolean
    from: [String]
    to: [String]
    categories: [String]
    price: Int
    priceTotal: Int
    specialRecipe: Int
    iconPath: String
}

type SummonerSpellData {
    data: JSON!
    version: String!
    type: String!
}

type QueueType {
    queueId: Int!
    map: String!
    description: String
    notes: String
}

type TagData {
    precalcs: [Precalc!]!
    tags: [Tag!]!
}

type Tag {
    key: ID!
    text: String!
    color: String!
    description: String!
    triggers: [String!]!
    value: String
}

type Precalc {
    name: String!
    type: PrecalcType!
    from: FromClause
    list: String
    value: String
    conditions: [String!]
}

type FromClause {
    list: String
    type: String
    path: String
    conditions: [String!]
}

## Authentication Types
type User {
    id: ID!
    username: String!
    admin: Boolean!
}

type AuthResponse {
    token: String!
    message: String!
    user: User
}

## Basic Response Types

type DeleteResponse {
    message: String!
    success: Boolean!
}

type UpdateResponse {
    message: String!
    success: Boolean!
}


## Input Types
input MasterySortInput {
    field: MasterySortField!
    direction: SortDirection!
}

input ChallengeSortInput {
    field: ChallengeSortField!
    direction: SortDirection!
}

input StatRequest {
    path: String!
    aggregation: AggregationType!
}

## Enums
enum MasterySortField {
    CHAMPION_POINTS
    CHAMPION_LEVEL
    LAST_PLAY_TIME
    WIN_RATE
}

enum ChallengeSortField {
    PERCENTILE
    VALUE
    ACHIEVED_TIME
}

enum SortDirection {
    ASC
    DESC
}

enum AggregationType {
    AVG
    MAX
    MIN
    MODE
    SUM
    UNIQUE
    LIST
}

enum PrecalcType {
    list
    copy
    boolean
    calculate
    avg
}

## Directives
directive @auth on FIELD_DEFINITION
directive @admin on FIELD_DEFINITION

## Scalars
scalar JSON