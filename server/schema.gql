  type Query {
  summoner(region: String!, name: String!): Summoner
  summoners: [Summoner!]!
  match(id: ID!): Match
  participant(id: ID!): Participant
  matches(
    limit: Int
    timestamp: Float
    region: String
    summonerNames: [String!]
    roles: [String!]
    championIds: [Int!]
    queueIds: [Int!]
    tags: [String!]
  ): [Match!]!
  mastery(id: ID!): Mastery
  masteries(
    limit: Int
    championId: Int
    sortBy: MasterySortInput
  ): [Mastery!]!
  challenge(id: ID!): Challenge
  challenges(
    limit: Int
    sortBy: ChallengeSortInput
  ): [Challenge!]!
}

type Mutation {
  addSummoner(region: String!, name: String!): Summoner!
  updateSummoner(id: ID!): Summoner!
  updateAllSummoners: [Summoner!]!
  deleteSummoner(id: ID!): DeleteResponse!
  deleteOrphanMatches: DeleteResponse!
  formatOneParticipant(id: ID!): Participant!
  formatAllParticipants: FormatParticipantsResponse!
}

type Summoner {
  id: ID!
  regionDisplay: String!
  regionServer: String!
  regionGeo: String!
  regionURL: String!
  nameURL: String!
  tagline: String!
  accountId: String!
  puuid: String!
  name: String!
  profileIconId: Int!
  revisionDate: Float!
  summonerLevel: Int!
  lastUpdated: Float!
  rankedData: [RankedData!]!
  challengeData: ChallengeData!
  masteryData: [Mastery!]!
  matches(limit: Int, queueId: Int): [Match!]!
}

type Match {
  id: ID!
  metadata: MatchMetadata!
  info: MatchInfo!
}

type Mastery {
  id: ID!
  uniqueId: String!
  championId: Int!
  championLevel: Int!
  championPoints: Int!
  lastPlayTime: Float!
  championPointsSinceLastLevel: Int!
  championPointsUntilNextLevel: Int!
  chestGranted: Boolean!
  tokensEarned: Int!
  summonerId: String!
  puuid: String!
  profileIconId: Int!
  summonerName: String!
  winRate: Float
  gamesPlayed: Int!
  summoner: Summoner!
}

type Challenge {
  id: ID!
  uniqueId: String!
  puuid: String!
  profileIconId: Int!
  summonerName: String!
  challengeId: Int!
  challengeName: String!
  shortDesc: String!
  percentile: Float!
  level: String!
  value: Float!
  achievedTime: Float!
  summoner: Summoner!
}

type RankedData {
  leagueId: String!
  queueType: String!
  tier: String!
  rank: String!
  summonerId: String!
  summonerName: String!
  leaguePoints: Int!
  wins: Int!
  losses: Int!
  veteran: Boolean!
  inactive: Boolean!
  freshBlood: Boolean!
  hotStreak: Boolean!
}

type ChallengeData {
  totalPoints: ChallengePoints!
  categoryPoints: CategoryPoints!
  challenges: [Challenge!]!
  preferences: ChallengePreferences!
}

type ChallengePoints {
  level: String!
  current: Int!
  max: Int!
  percentile: Float!
}

type CategoryPoints {
  TEAMWORK: ChallengePoints!
  EXPERTISE: ChallengePoints!
  IMAGINATION: ChallengePoints!
  COLLECTION: ChallengePoints!
  VETERANCY: ChallengePoints!
}

type ChallengePreferences {
  bannerAccent: String!
  title: String!
  challengeIds: [Int!]!
}

type AuthPayload {
  token: String!
  message: String!
}

type DeleteResponse {
  message: String!
  success: Boolean!
}

input MasterySortInput {
  field: MasterySortField!
  direction: SortDirection!
}

input ChallengeSortInput {
  field: ChallengeSortField!
  direction: SortDirection!
}

enum MasterySortField {
  CHAMPION_POINTS
  CHAMPION_LEVEL
  LAST_PLAY_TIME
  WIN_RATE
}

enum ChallengeSortField {
  PERCENTILE
  VALUE
  ACHIEVED_TIME
}

enum SortDirection {
  ASC
  DESC
}

type MatchMetadata {
  dataVersion: String!
  matchId: String!
  participants: [String!]!
  queueId: Int!
  tftSetNumber: Int
  gameLength: Float!
  gameVariation: String!
  gameVersion: String!
  gameMode: String!
  gameType: String!
  gameQueueConfigId: Int!
  mapId: Int!
  platformId: String!
  gameStartTime: Float!
  gameEndTime: Float!
  gameCreation: Float!
}

type MatchInfo {
  gameCreation: Float!
  gameDuration: Float!
  gameId: Float!
  gameMode: String!
  gameName: String!
  gameStartTimestamp: Float!
  gameType: String!
  gameVersion: String!
  mapId: Float!
  participants: [Participant!]!
  platformId: String!
  queueId: Int!
  tftSetNumber: Float
  teams: [Team!]!
}

type Team {
  teamId: Int!
  win: Boolean!
  firstBlood: Boolean!
  firstTower: Boolean!
  firstInhibitor: Boolean!
  firstBaron: Boolean!
  firstDragon: Boolean!
  firstRiftHerald: Boolean!
  towerKills: Int!
  inhibitorKills: Int!
  baronKills: Int!
  dragonKills: Int!
  riftHeraldKills: Int!
  dominionVictoryScore: Int!
  bans: [Ban!]!
}

type Ban {
  championId: Int!
  pickTurn: Int!
}

type Participant {
  uniqueId: String!
  gameMode: String!
  gameStartTimestamp: Float
  matchId: String
  allInPings: Int
  assistMePings: Int
  assists: Int!
  baitPings: Int
  baronKills: Int!
  basicPings: Int
  bountyLevel: Int!
  queueId: Int
  challenges: Challenges
  champExperience: Int!
  champLevel: Int!
  championId: Int!
  championName: String!
  championTransform: Int!
  commandPings: Int
  consumablesPurchased: Int!
  damageDealtToBuildings: Int!
  damageDealtToObjectives: Int!
  damageDealtToTurrets: Int!
  damageSelfMitigated: Int!
  dangerPings: Int
  deaths: Int!
  detectorWardsPlaced: Int!
  doubleKills: Int!
  dragonKills: Int!
  eligibleForProgression: Boolean
  enemyMissingPings: Int
  enemyVisionPings: Int
  firstBloodAssist: Boolean!
  firstBloodKill: Boolean!
  firstTowerAssist: Boolean!
  firstTowerKill: Boolean!
  gameEndedInEarlySurrender: Boolean!
  gameEndedInSurrender: Boolean!
  getBackPings: Int
  goldEarned: Int!
  goldSpent: Int!
  holdPings: Int
  individualPosition: String
  inhibitorKills: Int
  inhibitorTakedowns: Int
  inhibitorsLost: Int
  itemNumber: Int
  item0: Int
  item1: Int
  item2: Int
  item3: Int
  item4: Int
  item5: Int
  item6: Int
  itemsPurchased: Int
  killingSprees: Int
  kills: Int
  lane: String
  largestCriticalStrike: Int
  largestKillingSpree: Int
  largestMultiKill: Int
  longestTimeSpentLiving: Int
  magicDamageDealt: Int
  magicDamageDealtToChampions: Int
  magicDamageTaken: Int
  needVisionPings: Int
  neutralMinionsKilled: Int
  nexusKills: Int
  nexusLost: Int
  nexusTakedowns: Int
  objectivesStolen: Int
  objectivesStolenAssists: Int
  onMyWayPings: Int
  participantId: Int
  pentaKills: Int
  perks: Perks
  physicalDamageDealt: Int
  physicalDamageDealtToChampions: Int
  physicalDamageTaken: Int
  profileIcon: Int
  pushPings: Int
  puuid: String
  quadraKills: Int
  riotIdGameName: String
  riotIdTagline: String
  role: String
  sightWardsBoughtInGame: Int
  spell1Casts: Int
  spell2Casts: Int
  spell3Casts: Int
  spell4Casts: Int
  summoner1Casts: Int
  summoner1Id: Int
  summoner2Casts: Int
  summoner2Id: Int
  summonerId: String
  summonerLevel: Int
  summonerName: String
  tags: Tags
  teamEarlySurrendered: Boolean
  teamId: Int
  teamPosition: String
  timeCCingOthers: Int
  timePlayed: Int
  totalDamageDealt: Int
  totalDamageDealtToChampions: Int
  totalDamageShieldedOnTeammates: Int
  totalDamageTaken: Int
  totalHeal: Int
  totalHealsOnTeammates: Int
  totalMinionsKilled: Int
  totalTimeCCDealt: Int
  totalTimeSpentDead: Int
  totalUnitsHealed: Int
  tripleKills: Int
  trueDamageDealt: Int
  trueDamageDealtToChampions: Int
  trueDamageTaken: Int
  turretKills: Int
  turretTakedowns: Int
  turretsLost: Int
  unrealKills: Int
  visionClearedPings: Int
  visionScore: Int
  visionWardsBoughtInGame: Int
  wardsKilled: Int
  wardsPlaced: Int
  win: Boolean
}

type FormatParticipantsResponse {
  total: Int!
  success: Int!
  failed: Int!
  errors: JSON!
}

type Tags {
  
}

type TagValueFloat {
  isTriggered: Boolean
  value: Float
}

type Perks {
  statPerks: StatPerks
  styles: [Style]
}

type StatPerks {
  defense: Int
  flex: Int
  offense: Int
}

type Style {
  description: String
  selections: [Selection]
  style: Int
}

type Selection {
  perk: Int
  var1: Int
  var2: Int
  var3: Int
}

type Challenges {
  TwelveAssistStreakCount: Int
  abilityUses: Int
  acesBefore15Minutes: Int
  alliedJungleMonsterKills: Int
  baronTakedowns: Int
  blastConeOppositeOpponentCount: Int
  bountyGold: Int
  buffsStolen: Int
  completeSupportQuestInTime: Int
  controlWardsPlaced: Int
  damagePerMinute: Float
  damageTakenOnTeamPercentage: Float
  dancedWithRiftHerald: Int
  deathsByEnemyChamps: Int
  dodgeSkillShotsSmallWindow: Int
  doubleAces: Int
  dragonTakedowns: Int
  earlyLaningPhaseGoldExpAdvantage: Int
  effectiveHealAndShielding: Float
  elderDragonKillsWithOpposingSoul: Int
  elderDragonMultikills: Int
  enemyChampionImmobilizations: Int
  enemyJungleMonsterKills: Int
  epicMonsterKillsNearEnemyJungler: Int
  epicMonsterKillsWithin3NumberSecondsOfSpawn: Int
  epicMonsterSteals: Int
  epicMonsterStolenWithoutSmite: Int
  firstTurretKilledTime: Int
  flawlessAces: Int
  fullTeamTakedown: Int
  gameLength: Float
  getTakedownsInAllLanesEarlyJungleAsLaner: Int
  goldPerMinute: Float
  hadOpenNexus: Int
  immobilizeAndKillWithAlly: Int
  initialBuffCount: Int
  initialCrabCount: Int
  jungleCsBefore1NumberMinutes: Int
  junglerTakedownsNearDamagedEpicMonster: Int
  kTurretsDestroyedBeforePlatesFall: Int
  kda: Float
  killAfterHiddenWithAlly: Int
  killParticipation: Float
  killedChampTookFullTeamDamageSurvived: Int
  killsNearEnemyTurret: Int
  killsOnOtherLanesEarlyJungleAsLaner: Int
  killsOnRecentlyHealedByAramPack: Int
  killsUnderOwnTurret: Int
  killsWithHelpFromEpicMonster: Int
  knockEnemyIntoTeamAndKill: Int
  landSkillShotsEarlyGame: Int
  laneMinionsFirst10Minutes: Int
  laningPhaseGoldExpAdvantage: Int
  legendaryCount: Int
  lostAnInhibitor: Int
  maxCsAdvantageOnLaneOpponent: Float
  maxKillDeficit: Int
  maxLevelLeadLaneOpponent: Int
  moreEnemyJungleThanOpponent: Int
  multiKillOneSpell: Int
  multiTurretRiftHeraldCount: Int
  multikills: Int
  multikillsAfterAggressiveFlash: Int
  mythicItemUsed: Int
  outerTurretExecutesBefore1NumberMinutes: Int
  outnumberedKills: Int
  outnumberedNexusKill: Int
  perfectDragonSoulsTaken: Int
  perfectGame: Int
  pickKillWithAlly: Int
  poroExplosions: Int
  quickCleanse: Int
  quickFirstTurret: Int
  quickSoloKills: Int
  riftHeraldTakedowns: Int
  saveAllyFromDeath: Int
  scuttleCrabKills: Int
  skillshotsDodged: Int
  skillshotsHit: Int
  snowballsHit: Int
  soloBaronKills: Int
  soloKills: Int
  stealthWardsPlaced: Int
  survivedSingleDigitHpCount: Int
  survivedThreeImmobilizesInFight: Int
  takedownOnFirstTurret: Int
  takedowns: Int
  takedownsAfterGainingLevelAdvantage: Int
  takedownsBeforeJungleMinionSpawn: Int
  takedownsFirst25Minutes: Int
  takedownsInAlcove: Int
  takedownsInEnemyFountain: Int
  teamBaronKills: Int
  teamDamagePercentage: Float
  teamElderDragonKills: Int
  teamRiftHeraldKills: Int
  threeWardsOneSweeperCount: Int
  tookLargeDamageSurvived: Int
  turretPlatesTaken: Int
  turretTakedowns: Int
  turretsTakenWithRiftHerald: Int
  twentyMinionsIn3SecondsCount: Int
  unseenRecalls: Int
  visionScoreAdvantageLaneOpponent: Float
  visionScorePerMinute: Float
  wardTakedowns: Int
  wardTakedownsBefore2NumberM: Int
  wardsGuarded: Int
}

type Query {
  gameData: GameData!
  championData: ChampionData!
  itemData: ItemData!
  summonerSpellData: SummonerSpellData!
  queueTypeData: [QueueType!]!
  tagData: TagData!
  tagFileVersions: [TagFileVersion!]!
  tagCurrentVersion: TagFileVersion!
  tagFileByVersion( version: ID! ): TagData!
  tagLastBackFill: TagFileBackFill!
}

type Mutation {
  updateGameData: UpdateResponse!
  updateTagData( file: String! ): UpdateResponse!
}

type GameData {
  champions: ChampionData!
  items: [ItemData!]!
  summonerSpells: SummonerSpellData!
  queueTypes: [QueueType!]!
  tagData: TagData!
  tagFileVersions: [TagFileVersion!]!
  tagCurrentVersion: TagFileVersion!
  tagLastBackFill: TagFileBackFill!
}

type TagFileVersion {
  id: ID!
  user: String!
}

type TagFileBackFill {
  id: ID!
  user: String!
  results: FormatParticipantsResponse!
}

type ChampionData {
  data: JSON!
  version: String!
  type: String!
  format: String!
}

type ItemData {
  id: ID!
  name: String!
  description: String
  active: Boolean
  inStore: Boolean
  from: [String]
  to: [String]
  categories: [String]
  price: Int
  priceTotal: Int
  specialRecipe: Int
  iconPath: String
}

type SummonerSpellData {
  data: JSON!
  version: String!
  type: String!
}

type QueueType {
  queueId: Int!
  map: String!
  description: String
  notes: String
}

type UpdateResponse {
  message: String!
  success: Boolean!
}

type TagData {
  precalcs: [Precalc!]!
  tags: [Tag!]!
}

type Tag {
  key: ID!
  text: String!
  color: String!
  description: String!
  triggers: [String!]!
  value: String
}

type Precalc {
  name: String!
  type: PrecalcType!
  from: FromClause
  list: String
  value: String
  conditions: [String!]
}

enum PrecalcType {
  list
  copy
  boolean
  calculate
  avg
}

type FromClause {
  list: String
  type: String
  path: String
  conditions: [String!]
}

scalar JSON

# Basic User Types
type Query {
  me: User
}

type Mutation {
  register(username: String!, password: String!): AuthResponse!
  login(username: String!, password: String!): AuthResponse!
}

type User {
  id: ID!
  username: String!
  admin: Boolean!
}

type AuthResponse {
  token: String!
  message: String!
  user: User
}

# Extended User Types for Auth
input RegisterInput {
  username: String!
  password: String!
}

input LoginInput {
  username: String!
  password: String!
}

# Shared Types
type Error {
  path: String!
  message: String!
}

type ValidationError {
  field: String!
  message: String!
}

type SuccessResponse {
  success: Boolean!
  message: String
}

# Auth Directives
directive @auth on FIELD_DEFINITION
directive @admin on FIELD_DEFINITION

# stats.graphql
type Query {
  stats(region: String
  summonerName: String
  role: String
  championId: Int
  queueId: Int
  limit: Int
  stats: [StatRequest!]!
): MatchStats!
}

input StatRequest {
  path: String!
  aggregation: AggregationType!
}

enum AggregationType {
  AVG
  MAX
  MIN
  MODE
  SUM
  UNIQUE
  LIST
}

type MatchStats {
  results: JSON!
  matchCount: Int!
}
